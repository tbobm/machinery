{
	"info": {
		"_postman_id": "d7a558c6-7f75-4279-9943-530026db2dfa",
		"name": "Machinery",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create the upper Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var serviceResponse = {",
							"    \"service_id\": {",
							"        \"type\": \"string\"",
							"    }",
							"};",
							"",
							"",
							"pm.test('Response contains a service_id', function () {",
							"    pm.expect(tv4.validate(pm.response.json(), serviceResponse)).to.be.true",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"upper\",\n    \"address\": \"http://{{UPPER_URL}}\",\n    \"inputs\": [\n        {\n            \"name\": \"message\",\n            \"type\": \"string\",\n            \"description\": \"The text to transform\"\n        }\n        ],\n        \"outputs\": [\n        {\n            \"name\": \"message\",\n            \"type\": \"string\",\n            \"description\": \"The text to transform\"\n       }\n    ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{APP_URL}}/s",
					"protocol": "http",
					"host": [
						"{{APP_URL}}"
					],
					"path": [
						"s"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Workflow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var serviceResponse = {",
							"    \"workflow_id\": {",
							"        \"type\": \"string\"",
							"    }",
							"};",
							"",
							"",
							"pm.test('Response contains a workflow_id', function () {",
							"    pm.expect(tv4.validate(pm.response.json(), serviceResponse)).to.be.true",
							"    postman.setGlobalVariable(\"workflow_id\", pm.response.json()['workflow_id'])",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"process-text\",\n    \"services\": [\"upper\"],\n    \"inputs\": [\n         {\n            \"name\": \"message\",\n            \"type\": \"string\",\n            \"description\": \"The text to process\"\n        }\n    ],\n    \"outputs\": [\n         {\n            \"name\": \"message\",\n            \"type\": \"string\",\n            \"description\": \"The processed text\"\n        },\n         {\n            \"name\": \"space_count\",\n            \"type\": \"int\",\n            \"description\": \"The number of spaces\"\n        }\n    ],\n    \"operations\": [ ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{APP_URL}}/w",
					"protocol": "http",
					"host": [
						"{{APP_URL}}"
					],
					"path": [
						"w"
					]
				},
				"description": "Create a valid Workflow using the registered Service (`upper`)"
			},
			"response": []
		},
		{
			"name": "Do not create Workflow if test not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"var serviceResponse = {",
							"    \"message\": {",
							"        \"type\": \"string\"",
							"    }",
							"};",
							"",
							"",
							"pm.test('Response contains a workflow_id', function () {",
							"    pm.expect(tv4.validate(pm.response.json(), serviceResponse)).to.be.true",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"process-text\",\n    \"services\": [\"upper\", \"reverse\", \"space-counter\"],\n    \"inputs\": [\n         {\n            \"name\": \"message\",\n            \"type\": \"string\",\n            \"description\": \"The text to process\"\n        }\n    ],\n    \"outputs\": [\n         {\n            \"name\": \"message\",\n            \"type\": \"string\",\n            \"description\": \"The processed text\"\n        },\n         {\n            \"name\": \"space_count\",\n            \"type\": \"int\",\n            \"description\": \"The number of spaces\"\n        }\n    ],\n    \"operations\": [ ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{APP_URL}}/w",
					"protocol": "http",
					"host": [
						"{{APP_URL}}"
					],
					"path": [
						"w"
					]
				},
				"description": "Upon creating a Workflow, every referenced Service must be registered beforehand."
			},
			"response": []
		},
		{
			"name": "Process an event using a workflow with Upper service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var eventResponse = {",
							"    \"message\": {",
							"        \"type\": \"string\"",
							"    }",
							"};",
							"",
							"",
							"pm.test('Response contains the message in uppercase', function () {",
							"    pm.expect(tv4.validate(pm.response.json(), eventResponse)).to.be.true",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"The Sun will soon rise again !\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{APP_URL}}/e/{{workflow_id}}",
					"protocol": "http",
					"host": [
						"{{APP_URL}}"
					],
					"path": [
						"e",
						"{{workflow_id}}"
					]
				}
			},
			"response": []
		}
	]
}